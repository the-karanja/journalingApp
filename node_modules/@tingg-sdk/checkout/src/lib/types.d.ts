import { SUPPORTED_COUNTRIES, SUPPORTED_ENVIRONMENTS, SUPPORTED_LANGUAGES } from "./constants";
export type Numeric = string | number;
export type Country = typeof SUPPORTED_COUNTRIES;
export type Language = typeof SUPPORTED_LANGUAGES;
export type Environment = (typeof SUPPORTED_ENVIRONMENTS)[number];
export type EncryptionData = null | string;
export type EncryptionInput = {
    ivKey: string;
    secretKey: string;
    payload: Partial<Payload>;
};
export type EncryptionError = null | {
    ivKey?: RangeError;
    secretKey?: RangeError;
    message?: string;
};
export type EncryptionReturnType = Promise<{
    error: EncryptionError;
    data: EncryptionData;
}>;
export type ValidationData = Partial<Payload>;
export type ValidationError = {
    message?: string;
    msisdn?: string[];
    due_date?: string[];
    customer_email?: string[];
    customer_last_name?: string[];
    customer_first_name?: string[];
    account_number?: string[];
    invoice_number?: string[];
    request_amount?: string[];
    request_description?: string[];
    merchant_transaction_id?: string[];
    service_code?: string[];
    prefill_msisdn?: string[];
    payment_option_code?: string[];
    language_code?: string[];
    charge_beneficiaries?: string[];
    country_code?: string[];
    currency_code?: string[];
    callback_url?: string[];
    fail_redirect_url?: string[];
    success_redirect_url?: string[];
    pending_redirect_url?: string[];
};
export type ValidationInput = Partial<Payload> & {
    [key: string]: any;
};
export type ValidationReturnType = {
    error: null;
    data: ValidationData;
} | {
    error: ValidationError;
    data: null;
};
export type CheckoutInput = EncryptionInput & {
    accessKey: string;
};
export type CheckoutReturnType = {
    error: ValidationError | EncryptionError;
    data: null;
} | {
    error: null;
    data: {
        url: string;
        access_key: string;
        encrypted_payload: string;
    };
};
export type ExpressInput = {
    apiKey: string;
    clientId: string;
    clientSecret: string;
    payload: Partial<Payload>;
};
export type ExpressReturnType = {
    error: string;
    data: null;
} | {
    error: null;
    data: {
        long_url: string;
        short_url: string;
    };
};
export type ChargeBeneficiary = {
    amount: number;
    charge_beneficiary_code: string;
};
export type Payload = {
    msisdn: string;
    due_date: string;
    customer_email: string;
    customer_last_name: string;
    customer_first_name: string;
    account_number: string;
    invoice_number?: string;
    request_amount: Numeric;
    request_description: string;
    merchant_transaction_id: string;
    service_code: string;
    prefill_msisdn?: boolean;
    payment_option_code?: string;
    language_code?: keyof Language;
    charge_beneficiaries?: ChargeBeneficiary[];
    country_code: Country[keyof Country]["country_code"];
    currency_code: Country[keyof Country]["currency_code"];
    callback_url: string;
    fail_redirect_url: string;
    success_redirect_url: string;
    pending_redirect_url?: string;
};
export type PhoneNumberValidationReturnType = boolean | {
    prefix: string;
    msisdn: string;
};
export type WebhookPaymentRecord = {
    msisdn: string;
    amount_paid: Numeric;
    service_code: string;
    customer_name: string;
    account_number: string;
    payer_narration: string;
    payer_client_name: string;
    payer_client_code: string;
    cpg_transaction_id: string;
    hub_overall_status: number;
    payer_transaction_id: string;
    date_payment_received: string;
    currency_code: Country[keyof Country]["currency_code"];
};
export type WebhookRequestStatusCode = {
    102: "Insufficient funds";
    101: "Invalid pin/canceled";
    177: "partially paid requests";
    99: "Generic Failed Payment Status";
    129: "Request expired without payments";
    178: "Checkout request was fully paid for";
    179: "Checkout request was partially paid for but expired";
};
export type WebhookRequestBody = {
    msisdn: string;
    extra_data: string;
    amount_paid: Numeric;
    request_date: string;
    service_code: string;
    account_number: string;
    request_amount: Numeric;
    checkout_request_id: number;
    service_charge_amount: Numeric;
    original_request_amount: Numeric;
    request_status_description: string;
    merchant_transaction_id: string | number;
    request_status_code: keyof WebhookRequestStatusCode;
    currency_code: Country[keyof Country]["country_code"];
    country_abbrv: Country[keyof Country]["country_code"];
    request_currency_code: Country[keyof Country]["currency_code"];
    original_request_currency_code: Country[keyof Country]["currency_code"];
    payments: WebhookPaymentRecord[];
    failed_payments: [];
};
export type AuthResponse = {
    token_type: string;
    expires_in: number;
    access_token: string;
    refresh_token: string;
};
export type ExpressResponse = UrlResponse | ValidationResponse | ApiError;
export type UrlResponse = {
    status: {
        status_code: number;
        status_description: string;
    };
    results: {
        long_url: string;
        short_url: string;
    };
};
export type ValidationResponse = {
    status: number;
    message: string;
};
export type ApiError = {
    data?: any;
    message: string;
    success: boolean;
    statusCode: number;
};
